# angle resolved magnetophotoluminescenece measurement
import time
import numpy as np
import qt
import msvcrt

#reload(SiC_Toptica_Search_Piezo_Sweep)


#M_list = np.array((46.9, 63.15, 71.38, 76.92, 79.0, 82.0, 0.1))
M_list = np.array((1.46246,1.79904,2.13205,2.46156,2.78763,3.11033,3.4297,3.74582,4.05873,4.3685,4.67517,4.9788,
                   5.27945,5.57716,5.87199,6.16397,6.45316,6.73961,7.02335,7.30443,7.5829,7.8588,8.13217,8.40304,
                   8.67146,8.93746,9.20109,9.46237,9.72135,9.97806,10.2325,10.4848,10.7349,10.9829,11.2287,11.4725,
                   11.7142,11.954,12.1917,12.4275,12.6613,12.8933,13.1233,13.3515,13.5779,13.8025,14.0253,14.2464,
                   14.4657,14.6834,14.8993,15.1136,15.3263,15.5373,15.7468,15.9546,16.161,16.3658,16.569,16.7708,
                   16.9711,17.17,17.3674,17.5634,17.758,17.9512,18.143,18.3335,18.5226,18.7105,18.897,19.0822,
                   19.2662,19.4489,19.6304,19.8106,19.9897,20.1675,20.3441,20.5196,20.6939,20.8671,21.0392,21.2101,
                   21.3799,21.5486,21.7162,21.8828,22.0483,22.2128,22.3762,22.5386,22.7,22.8604,23.0198,23.1782,
                   23.3357,23.4922,23.6477,23.8023,23.956,24.1088,24.2606,24.4115,24.5616,24.7108,24.8591,25.0065,
                   25.1531,25.2988,25.4437,25.5877,25.731,25.8734,26.015,26.1558,26.2959,26.4351,26.5736,26.7113,
                   26.8482,26.9844,27.1199,27.2546,27.3885,27.5218,27.6543,27.7861,27.9173,28.0477,28.1774,28.3064,
                   28.4348,28.5625,28.6895,28.8159,28.9416,29.0666,29.1911,29.3148,29.438,29.5605,29.6824,29.8037,
                   29.9244,30.0445,30.1639,30.2828,30.4011,30.5188,30.636,30.7525,30.8685,30.9839,31.0988,31.2131,
                   31.3269,31.4401,31.5528,31.6649,31.7766,31.8876,31.9982,32.1083,32.2178,32.3268,32.4353,32.5433,
                   32.6509,32.7579,32.8644,32.9705,33.076,33.1811,33.2857,33.3899,33.4935,33.5968,33.6995,33.8018,
                   33.9037,34.005,34.106,34.2065,34.3066,34.4062,34.5054,34.6042,34.7025,34.8005,34.898,34.9951,
                   35.0917,35.188,35.2839,35.3793,35.4744,35.569,35.6633,35.7572,35.8507,35.9438,36.0365,36.1288,
                   36.2208,36.3124,36.4036,36.4944,36.5849,36.675,36.7647,36.8541,36.9431,37.0318,37.1201,37.2081,
                   37.2957,37.383,37.4699,37.5565,37.6428,37.7287,37.8143,37.8996,37.9845,38.0691,38.1534,38.2373,
                   38.321,38.4043,38.4873,38.57,38.6524,38.7345,38.8162,38.8977,38.9788,39.0597,39.1403,39.2205,
                   39.3005,39.3802,39.4595,39.5386,39.6174,39.6959,39.7742,39.8521,39.9298,40.0072,40.0843,40.1611,
                   40.2377,40.314,40.39,40.4658,40.5413,40.6165,40.6914,40.7661,40.8406,40.9148,40.9887,41.0624,
                   41.1358,41.2089,41.2818,41.3545,41.4269,41.4991,41.571,41.6427,41.7141,41.7853,41.8563,41.927,
                   41.9975,42.0677,42.1378,42.2075,42.2771,42.3464,42.4155,42.4844,42.553,42.6215,42.6897,42.7576,
                   42.8254,42.8929,42.9603,43.0274,43.0943,43.1609,43.2274,43.2936,43.3597,43.4255,43.4911,43.5566,
                   43.6218,43.6868,43.7516,43.8162,43.8806,43.9448,44.0088,44.0726,44.1362,44.1996,44.2629,44.3259,
                   44.3887,44.4514,44.5138,44.5761,44.6381,44.7,44.7617,44.8233,44.8846,44.9457,45.0067,45.0675,
                   45.1281,45.1885,45.2488,45.3088,45.3687,45.4284,45.488,45.5474,45.6066,45.6656,45.7244,45.7831,
                   45.8416,45.9,45.9582,46.0162,46.074,46.1317,46.1892,46.2466,46.3038,46.3608,46.4176,46.4744,
                   46.5309,46.5873,46.6435,46.6996,46.7555,46.8113,46.8669,46.9224,46.9777,47.0328,47.0878,47.1427,
                   47.1974,47.2519,47.3063,47.3606,47.4147,47.4686,47.5224,47.5761,47.6296,47.683,47.7363,47.7894,
                   47.8423,47.8951,47.9478,48.0003,48.0527,48.105,48.1571,48.2091,48.2609,48.3127,48.3642,48.4157,
                   48.467,48.5182,48.5692,48.6201,48.6709,48.7216,48.7721,48.8225,48.8727,48.9229,48.9729,49.0227,
                   49.0725,49.1221,49.1716,49.221,49.2703,49.3194,49.3684,49.4173,49.466,49.5147,49.5632,49.6116,
                   49.6599,49.7081,49.7561,49.804,49.8518,49.8995,49.9471,49.9946,50.0419,50.0891,50.1362,50.1832,
                   50.2301,50.2769,50.3236,50.3701,50.4165,50.4629,50.5091,50.5552,50.6012,50.6471,50.6928,50.7385,
                   50.7841,50.8295,50.8749,50.9201,50.9653,51.0103,51.0552,51.1,51.1448,51.1894,51.2339,51.2783,
                   51.3226,51.3668,51.4109,51.4549,51.4988,51.5426,51.5863,51.6299,51.6734,51.7168,51.7601,51.8033,
                   51.8464,51.8894,51.9324,51.9752,52.0179,52.0605,52.1031,52.1455,52.1878,52.2301,52.2723,52.3143,
                   52.3563,52.3982,52.44,52.4817,52.5233,52.5648,52.6062,52.6475,52.6888,52.7299,52.771,52.812,
                   52.8529,52.8937,52.9344,52.975,53.0155,53.056,53.0964,53.1366,53.1768,53.217,53.257,53.2969,
                   53.3368,53.3765,53.4162,53.4558,53.4954,53.5348,53.5742,53.6134,53.6526,53.6917,53.7308,53.7697,
                   53.8086,53.8474,53.8861,53.9247,53.9633,54.0017,54.0401,54.0784,54.1167,54.1548,54.1929,54.2309,
                   54.2689,54.3067,54.3445,54.3822,54.4198,54.4573,54.4948,54.5322,54.5695,54.6068,54.644,54.6811,
                   54.7181,54.755,54.7919,54.8287,54.8655,54.9021,54.9387,54.9752,55.0117,55.0481,55.0844,55.1206,
                   55.1568,55.1929,55.2289,55.2648,55.3007,55.3366,55.3723,55.408,55.4436,55.4791,55.5146,55.55,
                   55.5854,55.6206,55.6558,55.691,55.726,55.7611,55.796,55.8309,55.8657,55.9004,55.9351,55.9697,
                   56.0043,56.0388,56.0732,56.1075,56.1418,56.1761,56.2102,56.2443,56.2784,56.3123,56.3463,56.3801,
                   56.4139,56.4476,56.4813,56.5149,56.5485))

# M_list = np.array((44.7182,44.7759,44.8335,44.891,44.9483,45.0054,45.0624,45.1192,45.1758,45.2323,45.2887,45.3448,
#                    45.4009,45.4567,45.5124,45.568,45.6234,45.6786,45.7337,45.7887,45.8435,45.8981,45.9526,46.007,
#                    46.0612,46.1153,46.1692,46.2229,46.2766,46.33,46.3834,46.4366,46.4896,46.5425,46.5953,46.6479,
#                    46.7004,46.7528,46.805,46.8571,46.909,46.9608,47.0125,47.064,47.1154,47.1667,47.2178,47.2688,
#                    47.3197,47.3705,47.4211))
ni63_dwell_time = 15000.0 # units are milliseconds
ni63_ctr_term = 'PFI0' # this channel counts everything
do_magnet_ramp = True



ni63 = qt.instruments['NIDAQ6363']
ni63.set_ctr1_src(ni63_ctr_term)
ni63.set_count_time(ni63_dwell_time/1000.0)

data = qt.Data(name='magnetoluminescence')
data.add_coordinate('magnet displacement (mm)')
data.add_coordinate('estimated field (Gauss)')
data.add_value('counts')

plot2d_ml = qt.Plot2D(data, name='magnetoluminescence', coorddim=1, valdim=2)

try:
    msg_string = [__name__ + ': magnetoluminescence measurement started, cryostat temperature %.2f K, heater power %.1f percent.' % (qt.instruments['ls332'].get_kelvinA(), qt.instruments['ls332'].get_heater_output() ) ]
    slack.chat.post_message('#singledefectlab', msg_string, as_user=True)
except:
    pass

qt.instruments['xps'].set_abs_positionM(M_list[0])
fbl.optimize()
print 'Entering loop.'
for jj, MM in enumerate(M_list):
    snspd.zero()
    snspd.set_bias0(-2.03)
    mm_norm = ((MM+1.8)-31.5)/18.53
    estimated_field = (258.9*mm_norm + 3608)/(mm_norm*mm_norm - 7.047*mm_norm + 13.85)
    print 'Setting magnet to %.2f mm, approx. %.2f Gauss' % (MM, estimated_field)
    qt.instruments['xps'].set_abs_positionM(MM)

    time.sleep(0.5)
    if msvcrt.kbhit():
        kb_char=msvcrt.getch()
        if kb_char == "q":
            break
    if np.mod(jj,1) == 0:
        fbl.optimize()

    ##########################
    # insert measurement code to loop over here

    current_counts = ni63.get('ctr1')

    data.add_data_point(MM,estimated_field,current_counts)
    qt.msleep(0.005)



    ##########################


try:
    msg_string = [__name__ + ': magnetoluminescence measurement finished index %d, magnet at %.2f mm, cryostat temperature %.2f K, heater power %.1f percent.' % (jj, qt.instruments['xps'].get_abs_positionM(), qt.instruments['ls332'].get_kelvinA(), qt.instruments['ls332'].get_heater_output() ) ]
    slack.chat.post_message('#singledefectlab', msg_string, as_user=True)

except:
    pass

#         ##########################
#     fbl.optimize()
#     end_vector = [fsm.get_abs_positionX(), fsm.get_abs_positionY(), xps.get_abs_positionZ()]
#
#     reference_defect_estimate = [reference_defect[0] + drift_vector[0] + end_vector[0] - begin_vector[0],
#                                  reference_defect[1] + drift_vector[1] + end_vector[1] - begin_vector[1],
#                                  reference_defect[2] + drift_vector[2] + end_vector[2] - begin_vector[2]]
#     fsm.move(reference_defect_estimate[0], reference_defect_estimate[1])
#     xps.set_abs_positionZ(reference_defect_estimate[2])
#     fbl.optimize()
#     new_reference_position = [fsm.get_abs_positionX(), fsm.get_abs_positionY(), xps.get_abs_positionZ()]
#     drift_vector = [new_reference_position[0] - reference_defect[0],
#                     new_reference_position[1] - reference_defect[1],
#                     new_reference_position[2] - reference_defect[2]]
#     data.add_data_point(i, drift_vector[0], drift_vector[1], drift_vector[2], end_vector[0], end_vector[1], end_vector[2])
#     print 'Drift vector is now %.2f %.2f %.2f' % (drift_vector[0], drift_vector[1], drift_vector[2])
#     try:
#         msg_string = [__name__ + ': finished defect %d, cryostat temperature %.2f K, heater power %.1f percent.' % (i, qt.instruments['ls332'].get_kelvinA(), qt.instruments['ls332'].get_heater_output() ) ]
#         slack.chat.post_message('#singledefectlab', msg_string, as_user=True)
#         msg_string = [__name__ + ': drift vector is %.2f um %.2f um %.2f um' % (drift_vector[0], drift_vector[1], 1000.0*drift_vector[2]) ]
#         slack.chat.post_message('#singledefectlab', msg_string, as_user=True)
#     except:
#         pass
#
data.close_file()
